#!/usr/bin/env node

/**
 * Module dependencies.
 */
// const WebSocket = require('ws');
// const Order = require('../models/custOrderModel')
const app = require("../app");
const debug = require("debug")("myapp:server");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3006");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// const wss = new WebSocket.Server({ port: 3000 });

// wss.on('connection', (ws) => {
//   console.log('WebSocket connected');

//   // 監聽WebSocket消息
//   ws.on('message', async (message) => {
//     console.log('Received WebSocket message:', message);

//     // 解析消息内容
//     const { action, data } = JSON.parse(message);
//     console.log(action)
//     if (action === 'getOrders') {
//       try {
//         // 在DB中查詢order模式的資料
//         const Order = mongoose.model('Order');
//         const orders = await Order.find().exec();
//         console.log(orders)
//         // 將查詢结果發送给客户端
//         ws.send(JSON.stringify(orders));
//       } catch (error) {
//         console.error('Error querying database:', error);
//       }
//     }
//   });

//   // 當WebSocket連接關閉
//   ws.on('close', () => {
//     console.log('WebSocket disconnected');
//   });
// });